{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","console","log","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qLAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACE,sBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAMhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAnBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCRdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEkCC,UAAUH,GAF5C,+DAGFI,MAAMF,GAHJ,cAGfG,EAHe,gBAIAA,EAAKC,OAJL,uBAIdC,EAJc,EAIdA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,sDCEPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAEjC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHGO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EAEdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAU,WAERxB,EAAQC,GACLwB,MAAK,SAAAC,GACFH,EAAS,CACTf,KAAMkB,EACNL,SAAS,SAId,CAACpB,IAEGqB,EDhBwBK,CAAa1B,GAA/Ba,EAFwB,EAE9BN,KAAaa,EAFiB,EAEjBA,QAIpB,OAFAO,QAAQC,IAAIR,GAGV,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAEMH,EAAOJ,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEQVkB,EAxBM,WAAO,IAAD,EAEW3C,mBAAS,CAAC,cAFrB,mBAElB4C,EAFkB,KAEN7C,EAFM,KAIzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEI6C,EAAWrB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,MCXnB+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d55a7594.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n  \n  const [inputValue, setInputValue] = useState('')\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    if(inputValue.trim().length > 2) {\n      setCategories(cats => [ inputValue, ...cats])\n      setInputValue('')\n    }\n\n  }\n  \n  return (  \n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n      />   \n    </form>\n  );\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n \n","export const getGifs = async (category) => {\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=hNWeKwkMsM4kEFGuKIANh4TfOUooV2EA`\n  const resp = await fetch(url)\n  const {data} = await resp.json()\n\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n\n  return gifs\n\n}","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem'\n\nexport const GifGrid = ({category}) => {\n\n  const {data: images,loading} = useFetchGifs(category)\n\n  console.log(loading)\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n\n      <div className=\"card-grid\">\n          {\n            images.map(img => (\n              <GifGridItem \n                key={img.id}\n                {...img}\n              />\n            ))\n          }\n      </div>\n    </>\n  )\n}\n","import { useState, useEffect } from \"react\"\nimport {getGifs} from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n  \n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  })\n\n  useEffect(() => {\n    \n    getGifs(category)\n      .then(imgs => {\n          setState({\n          data: imgs,\n          loading: false\n        })\n      })\n\n  }, [category])\n\n  return state //{data: [], loading: true}\n\n}\n","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One Punch'])\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories}/>\n      <hr />\n\n      <ol>\n        {\n          categories.map(category => (\n            <GifGrid \n              key={category}\n              category={category} \n            />\n          ))\n        }\n      </ol>\n    </>\n  );\n}\n \nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp'\n\nimport './index.css'\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}